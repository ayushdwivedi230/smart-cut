{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, loginUserSchema, insertSalonSchema, insertBarberSchema, insertServiceSchema, insertAppointmentSchema, insertReviewSchema } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.SESSION_SECRET || \"fallback_secret_key\";\n\ninterface AuthRequest extends Express.Request {\n  user?: { id: string; role: string };\n}\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: \"Invalid or expired token\" });\n    }\n    req.user = user;\n    next();\n  });\n};\n\n// Middleware to check admin role\nconst requireAdmin = (req: any, res: any, next: any) => {\n  if (req.user?.role !== \"admin\") {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n};\n\n// Middleware to check barber role\nconst requireBarber = (req: any, res: any, next: any) => {\n  if (req.user?.role !== \"barber\") {\n    return res.status(403).json({ message: \"Barber access required\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const existingUser = await storage.getUserByEmail(userData.email);\n      \n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      const token = jwt.sign({ id: user.id, role: user.role }, JWT_SECRET, { expiresIn: \"24h\" });\n      \n      res.json({ \n        token, \n        user: { \n          id: user.id, \n          email: user.email, \n          name: user.name, \n          role: user.role \n        } \n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid registration data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const credentials = loginUserSchema.parse(req.body);\n      const user = await storage.validateUser(credentials);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      const token = jwt.sign({ id: user.id, role: user.role }, JWT_SECRET, { expiresIn: \"24h\" });\n      \n      res.json({ \n        token, \n        user: { \n          id: user.id, \n          email: user.email, \n          name: user.name, \n          role: user.role \n        } \n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid login data\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ \n        id: user.id, \n        email: user.email, \n        name: user.name, \n        role: user.role \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Salon routes\n  app.get(\"/api/salons\", async (req, res) => {\n    try {\n      const salons = await storage.getSalons();\n      res.json(salons);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching salons\" });\n    }\n  });\n\n  app.get(\"/api/salons/:id\", async (req, res) => {\n    try {\n      const salon = await storage.getSalonById(req.params.id);\n      if (!salon) {\n        return res.status(404).json({ message: \"Salon not found\" });\n      }\n      \n      const barbers = await storage.getBarbersBySalon(salon.id);\n      res.json({ salon, barbers });\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching salon\" });\n    }\n  });\n\n  app.post(\"/api/salons\", authenticateToken, requireBarber, async (req: any, res) => {\n    try {\n      const salonData = insertSalonSchema.parse(req.body);\n      const salon = await storage.createSalon({ ...salonData, ownerId: req.user.id });\n      res.json(salon);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid salon data\" });\n    }\n  });\n\n  // Barber routes\n  app.get(\"/api/barbers/:id\", async (req, res) => {\n    try {\n      const barber = await storage.getBarberById(req.params.id);\n      if (!barber) {\n        return res.status(404).json({ message: \"Barber not found\" });\n      }\n      \n      const services = await storage.getServicesByBarber(barber.id);\n      const reviews = await storage.getReviewsByBarber(barber.id);\n      const salon = await storage.getSalonById(barber.salonId);\n      \n      res.json({ barber, services, reviews, salon });\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching barber\" });\n    }\n  });\n\n  app.post(\"/api/barbers\", authenticateToken, requireBarber, async (req: any, res) => {\n    try {\n      const barberData = insertBarberSchema.parse(req.body);\n      const barber = await storage.createBarber({ \n        ...barberData, \n        userId: req.user.id,\n        salonId: req.body.salonId \n      });\n      res.json(barber);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid barber data\" });\n    }\n  });\n\n  app.get(\"/api/barbers/:id/services\", async (req, res) => {\n    try {\n      const services = await storage.getServicesByBarber(req.params.id);\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching services\" });\n    }\n  });\n\n  app.post(\"/api/services\", authenticateToken, requireBarber, async (req: any, res) => {\n    try {\n      const serviceData = insertServiceSchema.parse(req.body);\n      const barber = await storage.getBarbersByUserId(req.user.id);\n      \n      if (!barber) {\n        return res.status(404).json({ message: \"Barber profile not found\" });\n      }\n\n      const service = await storage.createService({\n        ...serviceData,\n        barberId: barber.id\n      });\n      res.json(service);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid service data\" });\n    }\n  });\n\n  // Appointment routes\n  app.post(\"/api/appointments\", authenticateToken, async (req: any, res) => {\n    try {\n      const appointmentData = insertAppointmentSchema.parse(req.body);\n      const service = await storage.getServiceById(appointmentData.serviceId);\n      \n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n\n      const appointment = await storage.createAppointment({\n        ...appointmentData,\n        customerId: req.user.id,\n        totalPrice: service.price,\n      });\n      \n      res.json(appointment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid appointment data\" });\n    }\n  });\n\n  app.get(\"/api/appointments/my\", authenticateToken, async (req: any, res) => {\n    try {\n      if (req.user.role === \"customer\") {\n        const appointments = await storage.getAppointmentsByCustomer(req.user.id);\n        res.json(appointments);\n      } else if (req.user.role === \"barber\") {\n        const barber = await storage.getBarbersByUserId(req.user.id);\n        if (!barber) {\n          return res.status(404).json({ message: \"Barber profile not found\" });\n        }\n        const appointments = await storage.getAppointmentsByBarber(barber.id);\n        res.json(appointments);\n      } else {\n        res.status(403).json({ message: \"Invalid role for this endpoint\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching appointments\" });\n    }\n  });\n\n  app.patch(\"/api/appointments/:id/status\", authenticateToken, async (req: any, res) => {\n    try {\n      const { status } = req.body;\n      await storage.updateAppointmentStatus(req.params.id, status);\n      res.json({ message: \"Appointment status updated\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error updating appointment\" });\n    }\n  });\n\n  // Review routes\n  app.post(\"/api/reviews\", authenticateToken, async (req: any, res) => {\n    try {\n      const reviewData = insertReviewSchema.parse(req.body);\n      const review = await storage.createReview({\n        ...reviewData,\n        customerId: req.user.id,\n      });\n      res.json(review);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid review data\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching stats\" });\n    }\n  });\n\n  app.get(\"/api/admin/appointments\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const appointments = await storage.getAllAppointments();\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching appointments\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/salons/:id/approve\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { isApproved } = req.body;\n      await storage.updateSalonApproval(req.params.id, isApproved);\n      res.json({ message: \"Salon approval status updated\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error updating salon approval\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9903},"server/storage.ts":{"content":"import { type User, type InsertUser, type LoginUser, type Salon, type InsertSalon, type Barber, type InsertBarber, type Service, type InsertService, type Appointment, type InsertAppointment, type Review, type InsertReview } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // User operations\n  createUser(user: InsertUser): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  validateUser(credentials: LoginUser): Promise<User | null>;\n\n  // Salon operations\n  createSalon(salon: InsertSalon & { ownerId: string }): Promise<Salon>;\n  getSalons(): Promise<Salon[]>;\n  getSalonById(id: string): Promise<Salon | undefined>;\n  updateSalonApproval(id: string, isApproved: boolean): Promise<void>;\n\n  // Barber operations\n  createBarber(barber: InsertBarber & { userId: string; salonId: string }): Promise<Barber>;\n  getBarberById(id: string): Promise<Barber | undefined>;\n  getBarbersByUserId(userId: string): Promise<Barber | undefined>;\n  getBarbersBySalon(salonId: string): Promise<Barber[]>;\n  updateBarberAvailability(id: string, isAvailable: boolean): Promise<void>;\n\n  // Service operations\n  createService(service: InsertService & { barberId: string }): Promise<Service>;\n  getServicesByBarber(barberId: string): Promise<Service[]>;\n  getServiceById(id: string): Promise<Service | undefined>;\n\n  // Appointment operations\n  createAppointment(appointment: InsertAppointment & { customerId: string; totalPrice: string }): Promise<Appointment>;\n  getAppointmentsByCustomer(customerId: string): Promise<(Appointment & { barber: Barber; service: Service; salon: Salon })[]>;\n  getAppointmentsByBarber(barberId: string): Promise<(Appointment & { customer: User; service: Service })[]>;\n  updateAppointmentStatus(id: string, status: \"pending\" | \"confirmed\" | \"completed\" | \"cancelled\"): Promise<void>;\n  getAllAppointments(): Promise<(Appointment & { customer: User; barber: Barber; service: Service; salon: Salon })[]>;\n\n  // Review operations\n  createReview(review: InsertReview & { customerId: string }): Promise<Review>;\n  getReviewsByBarber(barberId: string): Promise<(Review & { customer: User })[]>;\n\n  // Admin operations\n  getStats(): Promise<{\n    totalUsers: number;\n    totalSalons: number;\n    totalAppointments: number;\n    pendingSalons: number;\n  }>;\n  getAllUsers(): Promise<User[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private salons: Map<string, Salon> = new Map();\n  private barbers: Map<string, Barber> = new Map();\n  private services: Map<string, Service> = new Map();\n  private appointments: Map<string, Appointment> = new Map();\n  private reviews: Map<string, Review> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private async seedData() {\n    // Create sample users\n    const adminUser = await this.createUser({\n      email: \"admin@smartcut.com\",\n      password: \"admin123\",\n      name: \"Admin User\",\n      role: \"admin\",\n    });\n\n    const barberUser = await this.createUser({\n      email: \"marcus@smartcut.com\",\n      password: \"barber123\",\n      name: \"Marcus Johnson\",\n      phone: \"(555) 123-4567\",\n      role: \"barber\",\n    });\n\n    const customerUser = await this.createUser({\n      email: \"john@example.com\",\n      password: \"customer123\",\n      name: \"John Smith\",\n      phone: \"(555) 987-6543\",\n      role: \"customer\",\n    });\n\n    // Create sample salon\n    const salon = await this.createSalon({\n      name: \"Premium Cuts\",\n      description: \"A modern barbershop specializing in classic and contemporary cuts\",\n      address: \"123 Main Street, Downtown\",\n      phone: \"(555) 555-0123\",\n      email: \"info@premiumcuts.com\",\n      ownerId: barberUser.id,\n    });\n\n    // Approve the salon\n    await this.updateSalonApproval(salon.id, true);\n\n    // Create barber profile\n    const barber = await this.createBarber({\n      userId: barberUser.id,\n      salonId: salon.id,\n      title: \"Master Barber\",\n      bio: \"Passionate barber specializing in modern cuts, beard grooming, and traditional hot towel shaves.\",\n      specialties: [\"Fade Cuts\", \"Beard Styling\", \"Hot Towel Shave\", \"Hair Washing\"],\n      experience: 8,\n      workingHours: {\n        monday: { start: \"09:00\", end: \"18:00\" },\n        tuesday: { start: \"09:00\", end: \"18:00\" },\n        wednesday: { start: \"09:00\", end: \"18:00\" },\n        thursday: { start: \"09:00\", end: \"18:00\" },\n        friday: { start: \"09:00\", end: \"18:00\" },\n        saturday: { start: \"10:00\", end: \"16:00\" },\n      },\n    });\n\n    // Create services\n    await this.createService({\n      name: \"Classic Haircut\",\n      description: \"Professional cut with styling\",\n      duration: 45,\n      price: \"35.00\",\n      barberId: barber.id,\n    });\n\n    await this.createService({\n      name: \"Fade + Beard Trim\",\n      description: \"Premium fade with beard styling\",\n      duration: 60,\n      price: \"55.00\",\n      barberId: barber.id,\n    });\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user: User = {\n      id,\n      email: insertUser.email,\n      password: hashedPassword,\n      name: insertUser.name,\n      phone: insertUser.phone || null,\n      role: insertUser.role || \"customer\",\n      profileImage: null,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async validateUser(credentials: LoginUser): Promise<User | null> {\n    const user = await this.getUserByEmail(credentials.email);\n    if (!user) return null;\n    \n    const isValidPassword = await bcrypt.compare(credentials.password, user.password);\n    return isValidPassword ? user : null;\n  }\n\n  async createSalon(salon: InsertSalon & { ownerId: string }): Promise<Salon> {\n    const id = randomUUID();\n    const newSalon: Salon = {\n      id,\n      name: salon.name,\n      description: salon.description || null,\n      address: salon.address,\n      phone: salon.phone || null,\n      email: salon.email || null,\n      images: null,\n      rating: \"0\",\n      reviewCount: 0,\n      isActive: true,\n      isApproved: false,\n      ownerId: salon.ownerId,\n      createdAt: new Date(),\n    };\n    this.salons.set(id, newSalon);\n    return newSalon;\n  }\n\n  async getSalons(): Promise<Salon[]> {\n    return Array.from(this.salons.values()).filter(salon => salon.isApproved && salon.isActive);\n  }\n\n  async getSalonById(id: string): Promise<Salon | undefined> {\n    return this.salons.get(id);\n  }\n\n  async updateSalonApproval(id: string, isApproved: boolean): Promise<void> {\n    const salon = this.salons.get(id);\n    if (salon) {\n      salon.isApproved = isApproved;\n      this.salons.set(id, salon);\n    }\n  }\n\n  async createBarber(barber: InsertBarber & { userId: string; salonId: string }): Promise<Barber> {\n    const id = randomUUID();\n    const newBarber: Barber = {\n      id,\n      userId: barber.userId,\n      salonId: barber.salonId,\n      title: barber.title,\n      bio: barber.bio || null,\n      specialties: barber.specialties || null,\n      experience: barber.experience || null,\n      portfolio: null,\n      rating: \"0\",\n      reviewCount: 0,\n      isAvailable: true,\n      workingHours: barber.workingHours || null,\n      createdAt: new Date(),\n    };\n    this.barbers.set(id, newBarber);\n    return newBarber;\n  }\n\n  async getBarberById(id: string): Promise<Barber | undefined> {\n    return this.barbers.get(id);\n  }\n\n  async getBarbersByUserId(userId: string): Promise<Barber | undefined> {\n    return Array.from(this.barbers.values()).find(barber => barber.userId === userId);\n  }\n\n  async getBarbersBySalon(salonId: string): Promise<Barber[]> {\n    return Array.from(this.barbers.values()).filter(barber => barber.salonId === salonId);\n  }\n\n  async updateBarberAvailability(id: string, isAvailable: boolean): Promise<void> {\n    const barber = this.barbers.get(id);\n    if (barber) {\n      barber.isAvailable = isAvailable;\n      this.barbers.set(id, barber);\n    }\n  }\n\n  async createService(service: InsertService & { barberId: string }): Promise<Service> {\n    const id = randomUUID();\n    const newService: Service = {\n      id,\n      barberId: service.barberId,\n      name: service.name,\n      description: service.description || null,\n      duration: service.duration,\n      price: service.price,\n      isActive: true,\n    };\n    this.services.set(id, newService);\n    return newService;\n  }\n\n  async getServicesByBarber(barberId: string): Promise<Service[]> {\n    return Array.from(this.services.values()).filter(service => service.barberId === barberId && service.isActive);\n  }\n\n  async getServiceById(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createAppointment(appointment: InsertAppointment & { customerId: string; totalPrice: string }): Promise<Appointment> {\n    const id = randomUUID();\n    const newAppointment: Appointment = {\n      id,\n      customerId: appointment.customerId,\n      barberId: appointment.barberId,\n      serviceId: appointment.serviceId,\n      appointmentDate: appointment.appointmentDate,\n      status: \"pending\",\n      notes: appointment.notes || null,\n      totalPrice: appointment.totalPrice,\n      createdAt: new Date(),\n    };\n    this.appointments.set(id, newAppointment);\n    return newAppointment;\n  }\n\n  async getAppointmentsByCustomer(customerId: string): Promise<(Appointment & { barber: Barber; service: Service; salon: Salon })[]> {\n    const customerAppointments = Array.from(this.appointments.values())\n      .filter(appointment => appointment.customerId === customerId);\n    \n    return customerAppointments.map(appointment => {\n      const barber = this.barbers.get(appointment.barberId)!;\n      const service = this.services.get(appointment.serviceId)!;\n      const salon = this.salons.get(barber.salonId)!;\n      return { ...appointment, barber, service, salon };\n    });\n  }\n\n  async getAppointmentsByBarber(barberId: string): Promise<(Appointment & { customer: User; service: Service })[]> {\n    const barberAppointments = Array.from(this.appointments.values())\n      .filter(appointment => appointment.barberId === barberId);\n    \n    return barberAppointments.map(appointment => {\n      const customer = this.users.get(appointment.customerId)!;\n      const service = this.services.get(appointment.serviceId)!;\n      return { ...appointment, customer, service };\n    });\n  }\n\n  async updateAppointmentStatus(id: string, status: \"pending\" | \"confirmed\" | \"completed\" | \"cancelled\"): Promise<void> {\n    const appointment = this.appointments.get(id);\n    if (appointment) {\n      appointment.status = status;\n      this.appointments.set(id, appointment);\n    }\n  }\n\n  async getAllAppointments(): Promise<(Appointment & { customer: User; barber: Barber; service: Service; salon: Salon })[]> {\n    return Array.from(this.appointments.values()).map(appointment => {\n      const customer = this.users.get(appointment.customerId)!;\n      const barber = this.barbers.get(appointment.barberId)!;\n      const service = this.services.get(appointment.serviceId)!;\n      const salon = this.salons.get(barber.salonId)!;\n      return { ...appointment, customer, barber, service, salon };\n    });\n  }\n\n  async createReview(review: InsertReview & { customerId: string }): Promise<Review> {\n    const id = randomUUID();\n    const newReview: Review = {\n      id,\n      customerId: review.customerId,\n      barberId: review.barberId,\n      appointmentId: review.appointmentId,\n      rating: review.rating,\n      comment: review.comment || null,\n      createdAt: new Date(),\n    };\n    this.reviews.set(id, newReview);\n    return newReview;\n  }\n\n  async getReviewsByBarber(barberId: string): Promise<(Review & { customer: User })[]> {\n    const barberReviews = Array.from(this.reviews.values())\n      .filter(review => review.barberId === barberId);\n    \n    return barberReviews.map(review => {\n      const customer = this.users.get(review.customerId)!;\n      return { ...review, customer };\n    });\n  }\n\n  async getStats(): Promise<{\n    totalUsers: number;\n    totalSalons: number;\n    totalAppointments: number;\n    pendingSalons: number;\n  }> {\n    return {\n      totalUsers: this.users.size,\n      totalSalons: Array.from(this.salons.values()).filter(s => s.isApproved).length,\n      totalAppointments: this.appointments.size,\n      pendingSalons: Array.from(this.salons.values()).filter(s => !s.isApproved).length,\n    };\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":12941},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, decimal, boolean, jsonb, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const userRoleEnum = pgEnum(\"user_role\", [\"customer\", \"barber\", \"admin\"]);\nexport const appointmentStatusEnum = pgEnum(\"appointment_status\", [\"pending\", \"confirmed\", \"completed\", \"cancelled\"]);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  role: userRoleEnum(\"role\").notNull().default(\"customer\"),\n  profileImage: text(\"profile_image\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const salons = pgTable(\"salons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  address: text(\"address\").notNull(),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  images: text(\"images\").array(),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  isApproved: boolean(\"is_approved\").default(false),\n  ownerId: varchar(\"owner_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const barbers = pgTable(\"barbers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  salonId: varchar(\"salon_id\").references(() => salons.id).notNull(),\n  title: text(\"title\").notNull(),\n  bio: text(\"bio\"),\n  specialties: text(\"specialties\").array(),\n  experience: integer(\"experience\"),\n  portfolio: text(\"portfolio\").array(),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  isAvailable: boolean(\"is_available\").default(true),\n  workingHours: jsonb(\"working_hours\"), // {\"monday\": {\"start\": \"09:00\", \"end\": \"18:00\"}}\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  barberId: varchar(\"barber_id\").references(() => barbers.id).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  duration: integer(\"duration\").notNull(), // in minutes\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  barberId: varchar(\"barber_id\").references(() => barbers.id).notNull(),\n  serviceId: varchar(\"service_id\").references(() => services.id).notNull(),\n  appointmentDate: timestamp(\"appointment_date\").notNull(),\n  status: appointmentStatusEnum(\"status\").notNull().default(\"pending\"),\n  notes: text(\"notes\"),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  barberId: varchar(\"barber_id\").references(() => barbers.id).notNull(),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id).notNull(),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  name: true,\n  phone: true,\n  role: true,\n});\n\nexport const loginUserSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const insertSalonSchema = createInsertSchema(salons).pick({\n  name: true,\n  description: true,\n  address: true,\n  phone: true,\n  email: true,\n});\n\nexport const insertBarberSchema = createInsertSchema(barbers).pick({\n  title: true,\n  bio: true,\n  specialties: true,\n  experience: true,\n  workingHours: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).pick({\n  name: true,\n  description: true,\n  duration: true,\n  price: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).pick({\n  barberId: true,\n  serviceId: true,\n  appointmentDate: true,\n  notes: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).pick({\n  barberId: true,\n  appointmentId: true,\n  rating: true,\n  comment: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type InsertSalon = z.infer<typeof insertSalonSchema>;\nexport type InsertBarber = z.infer<typeof insertBarberSchema>;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type Salon = typeof salons.$inferSelect;\nexport type Barber = typeof barbers.$inferSelect;\nexport type Service = typeof services.$inferSelect;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type Review = typeof reviews.$inferSelect;\n","size_bytes":5508},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport SalonProfile from \"@/pages/salon-profile\";\nimport Booking from \"@/pages/booking\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/salon/:id\" component={SalonProfile} />\n      <Route path=\"/book/:barberId/:serviceId\" component={Booking} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1182},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 4.9%);\n  --primary: hsl(355 78% 70%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(174 72% 62%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(41 96% 83%);\n  --accent-foreground: hsl(222 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(355 78% 70%);\n  --chart-1: hsl(355 78% 70%);\n  --chart-2: hsl(174 72% 62%);\n  --chart-3: hsl(41 96% 83%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 84% 4.9%);\n  --sidebar-primary: hsl(355 78% 70%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(41 96% 83%);\n  --sidebar-accent-foreground: hsl(222 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(355 78% 70%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(355 78% 70% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(355 78% 70% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(355 78% 70% / 0.00), 0px 1px 2px -1px hsl(355 78% 70% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(355 78% 70% / 0.00), 0px 1px 2px -1px hsl(355 78% 70% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(355 78% 70% / 0.00), 0px 2px 4px -1px hsl(355 78% 70% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(355 78% 70% / 0.00), 0px 4px 6px -1px hsl(355 78% 70% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(355 78% 70% / 0.00), 0px 8px 10px -1px hsl(355 78% 70% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(355 78% 70% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(355 78% 70%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(174 72% 62%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(355 78% 70%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.glass-effect {\n  background: rgba(255, 255, 255, 0.15);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.18);\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.6s ease-in;\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n.hover-lift {\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);\n}\n","size_bytes":3434},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-panel.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Users, \n  Store, \n  CalendarCheck, \n  DollarSign, \n  Download, \n  Settings,\n  UserPlus,\n  Building,\n  Activity,\n  MoreHorizontal,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequestWithAuth } from \"@/lib/auth\";\nimport type { User, Appointment, Barber, Service, Salon } from \"@shared/schema\";\n\ninterface AdminStats {\n  totalUsers: number;\n  totalSalons: number;\n  totalAppointments: number;\n  pendingSalons: number;\n}\n\ninterface AppointmentWithDetails extends Appointment {\n  customer: User;\n  barber: Barber;\n  service: Service;\n  salon: Salon;\n}\n\nexport default function AdminPanel() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: stats, isLoading: statsLoading } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  const { data: appointments = [], isLoading: appointmentsLoading } = useQuery<AppointmentWithDetails[]>({\n    queryKey: [\"/api/admin/appointments\"],\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const approveSalonMutation = useMutation({\n    mutationFn: async ({ id, isApproved }: { id: string; isApproved: boolean }) => {\n      return apiRequestWithAuth(\"PATCH\", `/api/admin/salons/${id}/approve`, { isApproved });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Salon approval status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const recentAppointments = appointments.slice(0, 10);\n  const recentUsers = users.slice(-10);\n\n  // Mock data for pending salon approvals since the storage doesn't track this separately\n  const pendingSalonApprovals = [\n    {\n      id: \"pending-1\",\n      name: \"Modern Styles Studio\",\n      owner: \"Sarah Wilson\",\n      location: \"Downtown, NYC\",\n      submitted: \"2 hours ago\",\n    },\n    {\n      id: \"pending-2\", \n      name: \"Urban Cuts\",\n      owner: \"Mike Chen\",\n      location: \"Midtown, NYC\",\n      submitted: \"5 hours ago\",\n    },\n  ];\n\n  const recentActivity = [\n    {\n      id: \"1\",\n      type: \"user_registration\",\n      description: \"New user registration: John Smith\",\n      timestamp: \"2 minutes ago\",\n      icon: UserPlus,\n    },\n    {\n      id: \"2\",\n      type: \"salon_registration\",\n      description: \"New salon registered: Elite Cuts\",\n      timestamp: \"15 minutes ago\",\n      icon: Building,\n    },\n    {\n      id: \"3\",\n      type: \"appointment_completed\",\n      description: \"Booking completed: Premium Cuts\",\n      timestamp: \"1 hour ago\",\n      icon: CalendarCheck,\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-muted\" data-testid=\"section-admin-panel\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Admin Dashboard</h2>\n            <p className=\"text-muted-foreground\">Monitor platform activity and manage users</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"secondary\" data-testid=\"button-export-data\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Data\n            </Button>\n            <Button data-testid=\"button-settings\">\n              <Settings className=\"mr-2 h-4 w-4\" />\n              Settings\n            </Button>\n          </div>\n        </div>\n\n        {/* Admin Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mr-4\">\n                <Users className=\"text-primary text-xl\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-users\">\n                  {statsLoading ? \"...\" : stats?.totalUsers || 0}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Users</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mr-4\">\n                <Store className=\"text-secondary text-xl\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-active-salons\">\n                  {statsLoading ? \"...\" : stats?.totalSalons || 0}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Active Salons</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\n                <CalendarCheck className=\"text-green-600 text-xl\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-bookings\">\n                  {statsLoading ? \"...\" : stats?.totalAppointments || 0}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Bookings</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mr-4\">\n                <DollarSign className=\"text-yellow-600 text-xl\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\">â‚¹84,72,300</p>\n                <p className=\"text-sm text-muted-foreground\">Platform Revenue</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Recent Activity */}\n          <Card className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-6\">Recent Activity</h3>\n            <div className=\"space-y-4\">\n              {recentActivity.map((activity) => {\n                const IconComponent = activity.icon;\n                return (\n                  <div key={activity.id} className=\"flex items-center space-x-4 p-3 bg-muted rounded-lg\" data-testid={`activity-${activity.id}`}>\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <IconComponent className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-foreground\" data-testid={`activity-description-${activity.id}`}>\n                        {activity.description}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`activity-timestamp-${activity.id}`}>\n                        {activity.timestamp}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </Card>\n\n          {/* User Management */}\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold text-foreground\">User Management</h3>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-users\">\n                View All\n              </Button>\n            </div>\n            <div className=\"space-y-4\">\n              {usersLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse bg-muted rounded-lg h-16\"></div>\n                  ))}\n                </div>\n              ) : (\n                recentUsers.map((user) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\" data-testid={`user-item-${user.id}`}>\n                    <div className=\"flex items-center space-x-3\">\n                      <img\n                        src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=60&h=60\"\n                        alt={`${user.name} profile`}\n                        className=\"w-10 h-10 rounded-full object-cover\"\n                      />\n                      <div>\n                        <p className=\"text-sm font-medium text-foreground\" data-testid={`user-name-${user.id}`}>\n                          {user.name}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\" data-testid={`user-email-${user.id}`}>\n                          {user.email}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={user.role === \"admin\" ? \"default\" : user.role === \"barber\" ? \"secondary\" : \"outline\"}\n                        data-testid={`user-role-${user.id}`}\n                      >\n                        {user.role}\n                      </Badge>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-user-menu-${user.id}`}>\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </Card>\n        </div>\n\n        {/* Recent Appointments */}\n        <Card className=\"p-6 mt-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-foreground\">Recent Appointments</h3>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Search appointments...\"\n                  className=\"pl-8 w-64\"\n                  data-testid=\"input-search-appointments\"\n                />\n                <Search className=\"absolute left-2 top-3 h-4 w-4 text-muted-foreground\" />\n              </div>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-appointments\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                Filter\n              </Button>\n            </div>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border\">\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Customer</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Service</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Salon</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Date</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Status</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {appointmentsLoading ? (\n                  [...Array(5)].map((_, i) => (\n                    <tr key={i} className=\"border-b border-border\">\n                      <td className=\"py-3 px-4\"><div className=\"animate-pulse bg-muted h-4 rounded\"></div></td>\n                      <td className=\"py-3 px-4\"><div className=\"animate-pulse bg-muted h-4 rounded\"></div></td>\n                      <td className=\"py-3 px-4\"><div className=\"animate-pulse bg-muted h-4 rounded\"></div></td>\n                      <td className=\"py-3 px-4\"><div className=\"animate-pulse bg-muted h-4 rounded\"></div></td>\n                      <td className=\"py-3 px-4\"><div className=\"animate-pulse bg-muted h-4 rounded\"></div></td>\n                      <td className=\"py-3 px-4\"><div className=\"animate-pulse bg-muted h-4 rounded\"></div></td>\n                    </tr>\n                  ))\n                ) : (\n                  recentAppointments.map((appointment) => (\n                    <tr key={appointment.id} className=\"border-b border-border\" data-testid={`appointment-row-${appointment.id}`}>\n                      <td className=\"py-3 px-4 text-sm font-medium text-foreground\" data-testid={`appointment-customer-${appointment.id}`}>\n                        {appointment.customer.name}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`appointment-service-${appointment.id}`}>\n                        {appointment.service.name}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`appointment-salon-${appointment.id}`}>\n                        {appointment.salon.name}\n                      </td>\n                      <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`appointment-date-${appointment.id}`}>\n                        {new Date(appointment.appointmentDate).toLocaleDateString()}\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <Badge \n                          variant={\n                            appointment.status === \"completed\" ? \"default\" :\n                            appointment.status === \"confirmed\" ? \"secondary\" :\n                            appointment.status === \"pending\" ? \"outline\" : \"destructive\"\n                          }\n                          data-testid={`appointment-status-${appointment.id}`}\n                        >\n                          {appointment.status}\n                        </Badge>\n                      </td>\n                      <td className=\"py-3 px-4 text-sm font-medium text-foreground\" data-testid={`appointment-amount-${appointment.id}`}>\n                        ${appointment.totalPrice}\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n\n        {/* Salon Approval Requests */}\n        <Card className=\"p-6 mt-8\">\n          <h3 className=\"text-xl font-semibold text-foreground mb-6\">Pending Salon Approvals</h3>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border\">\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Salon Name</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Owner</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Location</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Submitted</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {pendingSalonApprovals.map((salon) => (\n                  <tr key={salon.id} className=\"border-b border-border\" data-testid={`pending-salon-${salon.id}`}>\n                    <td className=\"py-3 px-4 text-sm font-medium text-foreground\" data-testid={`salon-name-${salon.id}`}>\n                      {salon.name}\n                    </td>\n                    <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`salon-owner-${salon.id}`}>\n                      {salon.owner}\n                    </td>\n                    <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`salon-location-${salon.id}`}>\n                      {salon.location}\n                    </td>\n                    <td className=\"py-3 px-4 text-sm text-muted-foreground\" data-testid={`salon-submitted-${salon.id}`}>\n                      {salon.submitted}\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-green-500 text-white hover:bg-green-600\"\n                          disabled={approveSalonMutation.isPending}\n                          onClick={() => approveSalonMutation.mutate({ id: salon.id, isApproved: true })}\n                          data-testid={`button-approve-${salon.id}`}\n                        >\n                          Approve\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-red-500 text-white hover:bg-red-600\"\n                          disabled={approveSalonMutation.isPending}\n                          onClick={() => approveSalonMutation.mutate({ id: salon.id, isApproved: false })}\n                          data-testid={`button-reject-${salon.id}`}\n                        >\n                          Reject\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          data-testid={`button-details-${salon.id}`}\n                        >\n                          Details\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":18273},"client/src/components/barber-dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { CalendarDays, Clock, Star, DollarSign, UserCog, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthService, apiRequestWithAuth } from \"@/lib/auth\";\nimport type { Appointment, Service, User } from \"@shared/schema\";\n\ninterface AppointmentWithCustomer extends Appointment {\n  customer: User;\n  service: Service;\n}\n\nexport default function BarberDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const user = AuthService.getUser();\n\n  const { data: appointments = [], isLoading } = useQuery<AppointmentWithCustomer[]>({\n    queryKey: [\"/api/appointments/my\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequestWithAuth(\"PATCH\", `/api/appointments/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments/my\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const todayAppointments = appointments.filter(app => {\n    const today = new Date().toDateString();\n    const appointmentDate = new Date(app.appointmentDate).toDateString();\n    return appointmentDate === today;\n  });\n\n  const pendingAppointments = appointments.filter(app => app.status === \"pending\");\n  const completedAppointments = appointments.filter(app => app.status === \"completed\");\n\n  const formatTime = (date: Date | string) => {\n    const d = new Date(date);\n    return d.toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  const monthlyEarnings = completedAppointments\n    .filter(app => {\n      const appointmentMonth = new Date(app.appointmentDate).getMonth();\n      const currentMonth = new Date().getMonth();\n      return appointmentMonth === currentMonth;\n    })\n    .reduce((sum, app) => sum + parseFloat(app.totalPrice), 0);\n\n  return (\n    <section className=\"py-20 bg-background\" data-testid=\"section-barber-dashboard\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Barber Dashboard - {user?.name}</h2>\n            <p className=\"text-muted-foreground\">Manage your appointments, profile, and business</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"secondary\" data-testid=\"button-edit-profile\">\n              <UserCog className=\"mr-2 h-4 w-4\" />\n              Edit Profile\n            </Button>\n            <Button data-testid=\"button-set-availability\">\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              Set Availability\n            </Button>\n          </div>\n        </div>\n\n        {/* Barber Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mr-4\">\n                <CalendarDays className=\"text-primary text-xl\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-today-bookings\">\n                  {todayAppointments.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Today's Bookings</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mr-4\">\n                <Clock className=\"text-secondary text-xl\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-pending-bookings\">\n                  {pendingAppointments.length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Pending Approval</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mr-4\">\n                <Star className=\"text-yellow-500 text-xl\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\">4.9</p>\n                <p className=\"text-sm text-muted-foreground\">Average Rating</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\n                <DollarSign className=\"text-green-600 text-xl\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-monthly-earnings\">\n                  â‚¹{monthlyEarnings.toFixed(2)}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">This Month</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Today's Schedule */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-semibold text-foreground\">Today's Schedule</h3>\n                <span className=\"text-sm text-muted-foreground\">\n                  {new Date().toLocaleDateString(\"en-US\", {\n                    weekday: \"long\",\n                    year: \"numeric\",\n                    month: \"long\",\n                    day: \"numeric\",\n                  })}\n                </span>\n              </div>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse bg-muted rounded-lg h-20\"></div>\n                  ))}\n                </div>\n              ) : todayAppointments.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {todayAppointments.map((appointment) => (\n                    <div key={appointment.id} className=\"flex items-center space-x-4 p-4 bg-muted rounded-lg\" data-testid={`appointment-${appointment.id}`}>\n                      <div className=\"w-2 h-12 bg-primary rounded-full\"></div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium text-foreground\">{appointment.service.name}</h4>\n                          <span className=\"text-lg font-semibold text-primary\">â‚¹{appointment.totalPrice}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                          <span>{formatTime(appointment.appointmentDate)}</span>\n                          <span>{appointment.customer.name}</span>\n                          <span>{appointment.customer.phone}</span>\n                        </div>\n                        {appointment.notes && (\n                          <p className=\"text-sm text-muted-foreground mt-1\">{appointment.notes}</p>\n                        )}\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-green-100 text-green-700 hover:bg-green-200\"\n                          disabled={updateStatusMutation.isPending}\n                          onClick={() => updateStatusMutation.mutate({ id: appointment.id, status: \"completed\" })}\n                          data-testid={`button-complete-${appointment.id}`}\n                        >\n                          Complete\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          disabled={updateStatusMutation.isPending}\n                          data-testid={`button-reschedule-${appointment.id}`}\n                        >\n                          Reschedule\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No appointments scheduled for today</p>\n                </div>\n              )}\n            </Card>\n\n            {/* Pending Requests */}\n            {pendingAppointments.length > 0 && (\n              <Card className=\"p-6 mt-8\">\n                <h3 className=\"text-xl font-semibold text-foreground mb-6\">Pending Booking Requests</h3>\n                <div className=\"space-y-4\">\n                  {pendingAppointments.map((request) => (\n                    <div key={request.id} className=\"flex items-center justify-between p-4 bg-yellow-50 border border-yellow-200 rounded-lg\" data-testid={`pending-request-${request.id}`}>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">{request.service.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(request.appointmentDate).toLocaleDateString()} â€¢ {request.customer.name} â€¢ {request.customer.phone}\n                        </p>\n                        {request.notes && <p className=\"text-sm text-muted-foreground\">{request.notes}</p>}\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-green-500 text-white hover:bg-green-600\"\n                          disabled={updateStatusMutation.isPending}\n                          onClick={() => updateStatusMutation.mutate({ id: request.id, status: \"confirmed\" })}\n                          data-testid={`button-accept-${request.id}`}\n                        >\n                          Accept\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-red-500 text-white hover:bg-red-600\"\n                          disabled={updateStatusMutation.isPending}\n                          onClick={() => updateStatusMutation.mutate({ id: request.id, status: \"cancelled\" })}\n                          data-testid={`button-decline-${request.id}`}\n                        >\n                          Decline\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            )}\n          </div>\n\n          {/* Right Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Availability Status */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Availability Status</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-foreground\">Currently Available</span>\n                  <Switch defaultChecked data-testid=\"switch-availability\" />\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  <p>Next available slot: Tomorrow 9:00 AM</p>\n                  <p>Today's schedule: 75% full</p>\n                </div>\n              </div>\n            </Card>\n\n            {/* Quick Stats */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">This Week</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Appointments</span>\n                  <span className=\"font-medium text-foreground\">\n                    {appointments.filter(app => {\n                      const weekAgo = new Date();\n                      weekAgo.setDate(weekAgo.getDate() - 7);\n                      return new Date(app.appointmentDate) >= weekAgo;\n                    }).length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Revenue</span>\n                  <span className=\"font-medium text-foreground\">â‚¹{monthlyEarnings.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">New Customers</span>\n                  <span className=\"font-medium text-foreground\">8</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Avg Rating</span>\n                  <span className=\"font-medium text-foreground\">4.9</span>\n                </div>\n              </div>\n            </Card>\n\n            {/* Recent Reviews */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Recent Reviews</h3>\n              <div className=\"space-y-3\">\n                <div className=\"p-3 bg-muted rounded-lg\">\n                  <div className=\"flex items-center mb-2\">\n                    <div className=\"flex text-yellow-400 text-sm mr-2\">\n                      <Star className=\"w-3 h-3 fill-current\" />\n                      <Star className=\"w-3 h-3 fill-current\" />\n                      <Star className=\"w-3 h-3 fill-current\" />\n                      <Star className=\"w-3 h-3 fill-current\" />\n                      <Star className=\"w-3 h-3 fill-current\" />\n                    </div>\n                    <span className=\"text-sm font-medium text-foreground\">David M.</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\"Excellent service! Marcus really knows his craft...\"</p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":14778},"client/src/components/barber-profile.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, MapPin, Phone, Clock } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Barber, Service, Review, User, Salon } from \"@shared/schema\";\n\ninterface BarberProfileProps {\n  barber: Barber;\n  services: Service[];\n  reviews: (Review & { customer: User })[];\n  salon: Salon;\n}\n\nexport default function BarberProfile({ barber, services, reviews, salon }: BarberProfileProps) {\n  const portfolioImages = [\n    \"https://images.unsplash.com/photo-1621605815971-fbc98d665033?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=300\",\n    \"https://images.unsplash.com/photo-1605497788044-5a32c7078486?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=300\",\n    \"https://images.unsplash.com/photo-1503951914875-452162b0f3f1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=300\",\n    \"https://images.unsplash.com/photo-1560066984-138dadb4c035?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=300\",\n  ];\n\n  return (\n    <section className=\"py-20 bg-muted\" data-testid=\"section-barber-profile\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <Card className=\"overflow-hidden\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Profile Info */}\n            <div className=\"p-8\">\n              <div className=\"flex items-start space-x-6 mb-6\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=150&h=150\"\n                  alt={`${barber.title} profile`}\n                  className=\"w-24 h-24 rounded-full object-cover\"\n                  data-testid=\"img-barber-avatar\"\n                />\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"text-salon-name\">\n                    {salon.name}\n                  </h2>\n                  <p className=\"text-muted-foreground mb-2\" data-testid=\"text-barber-title\">{barber.title}</p>\n                  <div className=\"flex items-center mb-2\">\n                    <div className=\"flex text-yellow-400 mr-2\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star key={i} className=\"w-4 h-4 fill-current\" />\n                      ))}\n                    </div>\n                    <span className=\"text-sm font-medium\" data-testid=\"text-barber-rating\">{barber.rating}</span>\n                    <span className=\"text-sm text-muted-foreground ml-2\" data-testid=\"text-review-count\">\n                      ({reviews.length} reviews)\n                    </span>\n                  </div>\n                  <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                    <MapPin className=\"w-4 h-4 mr-1\" />\n                    <span data-testid=\"text-salon-address\">{salon.address}</span>\n                  </div>\n                  <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                    <Phone className=\"w-4 h-4 mr-1\" />\n                    <span data-testid=\"text-salon-phone\">{salon.phone}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-experience\">\n                    {barber.experience}+ years experience\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-3\">About</h3>\n                <p className=\"text-muted-foreground\" data-testid=\"text-bio\">\n                  {barber.bio}\n                </p>\n              </div>\n\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-3\">Specialties</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {barber.specialties?.map((specialty, index) => (\n                    <Badge \n                      key={index} \n                      variant=\"secondary\" \n                      className=\"bg-primary/10 text-primary\"\n                      data-testid={`badge-specialty-${index}`}\n                    >\n                      {specialty}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Services & Pricing */}\n              <div className=\"mb-8\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Services & Pricing</h3>\n                <div className=\"space-y-4\">\n                  {services.map((service) => (\n                    <div key={service.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\" data-testid={`service-card-${service.id}`}>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\" data-testid={`service-name-${service.id}`}>\n                          {service.name}\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`service-description-${service.id}`}>\n                          {service.description}\n                        </p>\n                        <div className=\"flex items-center text-xs text-muted-foreground mt-1\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          <span data-testid={`service-duration-${service.id}`}>{service.duration} min</span>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-lg font-semibold text-primary\" data-testid={`service-price-${service.id}`}>\n                          ${service.price}\n                        </p>\n                        <Link href={`/book/${barber.id}/${service.id}`}>\n                          <Button size=\"sm\" className=\"mt-2\" data-testid={`button-book-service-${service.id}`}>\n                            Book Now\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Portfolio & Reviews */}\n            <div className=\"p-8 bg-muted\">\n              <div className=\"mb-8\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Portfolio</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {portfolioImages.map((src, index) => (\n                    <img\n                      key={index}\n                      src={src}\n                      alt={`Portfolio ${index + 1}`}\n                      className=\"rounded-lg object-cover w-full h-32 hover-lift\"\n                      data-testid={`img-portfolio-${index}`}\n                    />\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Recent Reviews</h3>\n                <div className=\"space-y-4\">\n                  {reviews.length > 0 ? (\n                    reviews.slice(0, 3).map((review) => (\n                      <Card key={review.id} className=\"p-4\" data-testid={`review-card-${review.id}`}>\n                        <div className=\"flex items-start space-x-3\">\n                          <img\n                            src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=60&h=60\"\n                            alt={`${review.customer.name} profile`}\n                            className=\"w-10 h-10 rounded-full object-cover\"\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h4 className=\"font-medium text-foreground\" data-testid={`review-customer-${review.id}`}>\n                                {review.customer.name}\n                              </h4>\n                              <div className=\"flex text-yellow-400 text-sm\">\n                                {[...Array(review.rating)].map((_, i) => (\n                                  <Star key={i} className=\"w-4 h-4 fill-current\" />\n                                ))}\n                              </div>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`review-comment-${review.id}`}>\n                              {review.comment}\n                            </p>\n                            <span className=\"text-xs text-muted-foreground\" data-testid={`review-date-${review.id}`}>\n                              {new Date(review.createdAt!).toLocaleDateString()}\n                            </span>\n                          </div>\n                        </div>\n                      </Card>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\">No reviews yet</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9528},"client/src/components/booking-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthService, apiRequestWithAuth } from \"@/lib/auth\";\nimport { Calendar, Clock, DollarSign, User, CheckCircle } from \"lucide-react\";\nimport type { Service, Barber } from \"@shared/schema\";\n\ninterface BookingFormProps {\n  barber: Barber;\n  service: Service;\n  onSuccess?: () => void;\n}\n\nexport default function BookingForm({ barber, service, onSuccess }: BookingFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const user = AuthService.getUser();\n\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n  const [selectedTime, setSelectedTime] = useState<string>(\"\");\n  const [customerInfo, setCustomerInfo] = useState({\n    name: user?.name || \"\",\n    phone: \"\",\n    email: user?.email || \"\",\n    notes: \"\",\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (appointmentData: {\n      barberId: string;\n      serviceId: string;\n      appointmentDate: string;\n      notes?: string;\n    }) => {\n      return apiRequestWithAuth(\"POST\", \"/api/appointments\", appointmentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments/my\"] });\n      toast({\n        title: \"Booking Confirmed!\",\n        description: \"Your appointment has been successfully booked.\",\n      });\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate available dates (next 14 days)\n  const availableDates = Array.from({ length: 14 }, (_, i) => {\n    const date = new Date();\n    date.setDate(date.getDate() + i + 1);\n    return date;\n  });\n\n  // Generate available times\n  const availableTimes = [\n    \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\"\n  ];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedDate || !selectedTime) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select both date and time for your appointment.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const appointmentDateTime = new Date(`${selectedDate}T${selectedTime}`);\n    \n    await bookingMutation.mutateAsync({\n      barberId: barber.id,\n      serviceId: service.id,\n      appointmentDate: appointmentDateTime.toISOString(),\n      notes: customerInfo.notes,\n    });\n  };\n\n  return (\n    <Card className=\"shadow-lg\" data-testid=\"card-booking-form\">\n      <CardContent className=\"p-8\">\n        <form onSubmit={handleSubmit}>\n          {/* Service Summary */}\n          <div className=\"mb-8 p-6 bg-muted rounded-lg\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">Service Details</h3>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h4 className=\"font-medium text-foreground\" data-testid=\"text-service-name\">\n                  {service.name}\n                </h4>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-service-duration\">\n                  {service.duration} minutes\n                </p>\n                <p className=\"text-sm text-muted-foreground\">{service.description}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-2xl font-semibold text-primary\" data-testid=\"text-service-price\">\n                  â‚¹{service.price}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Date Selection */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n              <Calendar className=\"mr-2 h-5 w-5\" />\n              Select Date\n            </h3>\n            <div className=\"grid grid-cols-7 gap-2\" data-testid=\"date-selection\">\n              {availableDates.map((date) => {\n                const dateStr = date.toISOString().split('T')[0];\n                const isSelected = selectedDate === dateStr;\n                return (\n                  <button\n                    key={dateStr}\n                    type=\"button\"\n                    onClick={() => setSelectedDate(dateStr)}\n                    className={`text-center p-3 border rounded-lg cursor-pointer transition-colors ${\n                      isSelected\n                        ? \"border-primary bg-primary/10 text-primary\"\n                        : \"border-border hover:border-primary hover:bg-primary/5\"\n                    }`}\n                    data-testid={`date-option-${dateStr}`}\n                  >\n                    <div className=\"text-xs text-muted-foreground\">\n                      {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\n                    </div>\n                    <div className=\"text-lg font-medium\">\n                      {date.getDate()}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {date.toLocaleDateString(\"en-US\", { month: \"short\" })}\n                    </div>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Time Selection */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n              <Clock className=\"mr-2 h-5 w-5\" />\n              Choose Time\n            </h3>\n            <div className=\"grid grid-cols-3 md:grid-cols-6 gap-3\" data-testid=\"time-selection\">\n              {availableTimes.map((time) => {\n                const isSelected = selectedTime === time;\n                return (\n                  <button\n                    key={time}\n                    type=\"button\"\n                    onClick={() => setSelectedTime(time)}\n                    className={`p-3 border rounded-lg text-center transition-colors ${\n                      isSelected\n                        ? \"border-primary bg-primary/10 text-primary\"\n                        : \"border-border hover:border-primary hover:bg-primary/5\"\n                    }`}\n                    data-testid={`time-option-${time}`}\n                  >\n                    <span className=\"text-sm font-medium\">\n                      {new Date(`2000-01-01T${time}`).toLocaleTimeString(\"en-US\", {\n                        hour: \"numeric\",\n                        minute: \"2-digit\",\n                        hour12: true,\n                      })}\n                    </span>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Customer Information */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n              <User className=\"mr-2 h-5 w-5\" />\n              Your Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  value={customerInfo.name}\n                  onChange={(e) => setCustomerInfo({ ...customerInfo, name: e.target.value })}\n                  placeholder=\"Enter your full name\"\n                  required\n                  data-testid=\"input-customer-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={customerInfo.phone}\n                  onChange={(e) => setCustomerInfo({ ...customerInfo, phone: e.target.value })}\n                  placeholder=\"(555) 123-4567\"\n                  required\n                  data-testid=\"input-customer-phone\"\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={customerInfo.email}\n                  onChange={(e) => setCustomerInfo({ ...customerInfo, email: e.target.value })}\n                  placeholder=\"john@example.com\"\n                  required\n                  data-testid=\"input-customer-email\"\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"notes\">Special Requests (Optional)</Label>\n                <Textarea\n                  id=\"notes\"\n                  rows={3}\n                  value={customerInfo.notes}\n                  onChange={(e) => setCustomerInfo({ ...customerInfo, notes: e.target.value })}\n                  placeholder=\"Any specific requests or notes for your barber...\"\n                  data-testid=\"textarea-customer-notes\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Booking Summary */}\n          <div className=\"bg-muted rounded-lg p-6 mb-8\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n              <CheckCircle className=\"mr-2 h-5 w-5\" />\n              Booking Summary\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Service:</span>\n                <span className=\"font-medium text-foreground\">{service.name}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Date & Time:</span>\n                <span className=\"font-medium text-foreground\">\n                  {selectedDate && selectedTime\n                    ? `${new Date(selectedDate).toLocaleDateString(\"en-US\", {\n                        weekday: \"short\",\n                        month: \"short\",\n                        day: \"numeric\",\n                      })} at ${new Date(`2000-01-01T${selectedTime}`).toLocaleTimeString(\"en-US\", {\n                        hour: \"numeric\",\n                        minute: \"2-digit\",\n                        hour12: true,\n                      })}`\n                    : \"Please select date and time\"}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Duration:</span>\n                <span className=\"font-medium text-foreground\">{service.duration} minutes</span>\n              </div>\n              <div className=\"border-t border-border pt-3 mt-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-lg font-semibold text-foreground\">Total:</span>\n                  <span className=\"text-lg font-semibold text-primary\">â‚¹{service.price}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"text-center\">\n            <Button\n              type=\"submit\"\n              size=\"lg\"\n              className=\"w-full md:w-auto px-8 py-4\"\n              disabled={bookingMutation.isPending || !selectedDate || !selectedTime}\n              data-testid=\"button-confirm-booking\"\n            >\n              <Calendar className=\"mr-2 h-5 w-5\" />\n              {bookingMutation.isPending ? \"Confirming Booking...\" : \"Confirm Booking\"}\n            </Button>\n            <p className=\"text-sm text-muted-foreground mt-3\">\n              You'll receive a confirmation email and SMS shortly\n            </p>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11987},"client/src/components/customer-dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarCheck, History, Heart, DollarSign, Plus, Search, User as UserIcon } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthService, apiRequestWithAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport type { Appointment, Barber, Service, Salon, User } from \"@shared/schema\";\n\ninterface AppointmentWithDetails extends Appointment {\n  barber: Barber;\n  service: Service;\n  salon: Salon;\n}\n\nexport default function CustomerDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n  const user = AuthService.getUser();\n\n  const { data: appointments = [], isLoading } = useQuery<AppointmentWithDetails[]>({\n    queryKey: [\"/api/appointments/my\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequestWithAuth(\"PATCH\", `/api/appointments/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments/my\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const upcomingAppointments = appointments.filter(\n    app => app.status === \"confirmed\" || app.status === \"pending\"\n  );\n  const completedAppointments = appointments.filter(app => app.status === \"completed\");\n\n  const formatDate = (date: Date | string) => {\n    const d = new Date(date);\n    return d.toLocaleDateString(\"en-US\", {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"2-digit\",\n    });\n  };\n\n  return (\n    <section className=\"py-20 bg-muted\" data-testid=\"section-customer-dashboard\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Welcome back, {user?.name}!</h2>\n            <p className=\"text-muted-foreground\">Manage your appointments and discover new salons</p>\n          </div>\n          <Button data-testid=\"button-new-appointment\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Book New Appointment\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Dashboard Stats */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mr-4\">\n                    <CalendarCheck className=\"text-primary text-xl\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-upcoming\">\n                      {upcomingAppointments.length}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Upcoming</p>\n                  </div>\n                </div>\n              </Card>\n              <Card className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mr-4\">\n                    <History className=\"text-secondary text-xl\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-completed\">\n                      {completedAppointments.length}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Completed</p>\n                  </div>\n                </div>\n              </Card>\n              <Card className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mr-4\">\n                    <Heart className=\"text-red-500 text-xl\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\">5</p>\n                    <p className=\"text-sm text-muted-foreground\">Favorites</p>\n                  </div>\n                </div>\n              </Card>\n              <Card className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\n                    <DollarSign className=\"text-green-600 text-xl\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      â‚¹{completedAppointments.reduce((sum, app) => sum + parseFloat(app.totalPrice), 0)}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Total Spent</p>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n\n          {/* Upcoming Appointments */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-foreground mb-6\">Upcoming Appointments</h3>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse bg-muted rounded-lg h-20\"></div>\n                  ))}\n                </div>\n              ) : upcomingAppointments.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {upcomingAppointments.map((appointment) => (\n                    <div key={appointment.id} className=\"flex items-center space-x-4 p-4 bg-muted rounded-lg\" data-testid={`appointment-${appointment.id}`}>\n                      <img\n                        src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=60&h=60\"\n                        alt=\"Barber\"\n                        className=\"w-12 h-12 rounded-full object-cover\"\n                      />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground\">{appointment.service.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">with {appointment.salon.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{formatDate(appointment.appointmentDate)}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-primary\">â‚¹{appointment.totalPrice}</p>\n                        <div className=\"flex space-x-2 mt-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"secondary\"\n                            disabled={updateStatusMutation.isPending}\n                            data-testid={`button-reschedule-${appointment.id}`}\n                          >\n                            Reschedule\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            disabled={updateStatusMutation.isPending}\n                            onClick={() => updateStatusMutation.mutate({ id: appointment.id, status: \"cancelled\" })}\n                            data-testid={`button-cancel-${appointment.id}`}\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No upcoming appointments</p>\n                  <Button \n                    className=\"mt-4\" \n                    data-testid=\"button-book-first\"\n                    onClick={() => navigate('/')}\n                  >\n                    Book Your First Appointment\n                  </Button>\n                </div>\n              )}\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"space-y-6\">\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Quick Actions</h3>\n              <div className=\"space-y-3\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start\" \n                  data-testid=\"button-quick-book\"\n                  onClick={() => navigate('/')}\n                >\n                  <Plus className=\"text-primary mr-3 h-4 w-4\" />\n                  Book Appointment\n                </Button>\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start\" \n                  data-testid=\"button-quick-find\"\n                  onClick={() => {\n                    navigate('/');\n                    // Scroll to salons section after navigation\n                    setTimeout(() => {\n                      const salonsSection = document.getElementById('salons');\n                      if (salonsSection) {\n                        salonsSection.scrollIntoView({ behavior: 'smooth' });\n                      }\n                    }, 100);\n                  }}\n                >\n                  <Search className=\"text-secondary mr-3 h-4 w-4\" />\n                  Find New Salons\n                </Button>\n                <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"button-quick-profile\">\n                  <UserIcon className=\"text-accent-foreground mr-3 h-4 w-4\" />\n                  Update Profile\n                </Button>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Favorite Salons</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                  <img\n                    src=\"https://images.unsplash.com/photo-1503951914875-452162b0f3f1?ixlib=rb-4.0.3\"\n                    alt=\"Salon\"\n                    className=\"w-10 h-10 rounded-lg object-cover\"\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-sm font-medium text-foreground\">Premium Cuts</h4>\n                    <p className=\"text-xs text-muted-foreground\">4.8 â˜… â€¢ 0.5 mi</p>\n                  </div>\n                  <Button size=\"sm\" variant=\"ghost\" data-testid=\"button-book-favorite\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":11336},"client/src/components/hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Search, Play } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function HeroSection() {\n  return (\n    <section className=\"relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 to-secondary/10\"></div>\n      <div \n        style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1622286346003-c4b1de35ddc1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1920&h=1080')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }}\n        className=\"relative min-h-screen flex items-center\"\n      >\n        <div className=\"absolute inset-0 bg-black/40\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-32\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6 animate-fade-in\">\n              Book Your Perfect\n              <span className=\"text-primary\"> Hair Experience</span>\n            </h1>\n            <p className=\"text-xl text-gray-200 mb-8 max-w-3xl mx-auto animate-fade-in\">\n              Connect with top-rated barbers and salons in your area. Schedule appointments, browse portfolios, and get the cut you deserve.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center animate-fade-in\">\n              <Button \n                size=\"lg\" \n                className=\"hover-lift\" \n                data-testid=\"button-find-salons\"\n                onClick={() => {\n                  const salonsSection = document.getElementById('salons');\n                  if (salonsSection) {\n                    salonsSection.scrollIntoView({ behavior: 'smooth' });\n                  }\n                }}\n              >\n                <Search className=\"mr-2 h-5 w-5\" />\n                Find Salons Near Me\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"bg-transparent border-2 border-white text-white hover:bg-white hover:text-foreground hover-lift\" data-testid=\"button-watch-demo\">\n                <Play className=\"mr-2 h-5 w-5\" />\n                Watch How It Works\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2357},"client/src/components/navbar.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { AuthService } from \"@/lib/auth\";\nimport { Scissors, Menu, X } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Navbar() {\n  const [isOpen, setIsOpen] = useState(false);\n  const user = AuthService.getUser();\n  const isAuthenticated = AuthService.isAuthenticated();\n\n  const handleLogout = async () => {\n    await AuthService.logout();\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50 backdrop-blur-md bg-opacity-90\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-8\">\n            <div className=\"flex-shrink-0\">\n              <Link href=\"/\">\n                <h1 className=\"text-2xl font-bold text-primary flex items-center cursor-pointer\">\n                  <Scissors className=\"mr-2 h-6 w-6\" />\n                  Smart Cut\n                </h1>\n              </Link>\n            </div>\n            <div className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-4\">\n                <Link href=\"/\" className=\"text-foreground hover:text-primary px-3 py-2 rounded-md text-sm font-medium transition-colors\">\n                  Home\n                </Link>\n                <Link href=\"/#salons\" className=\"text-muted-foreground hover:text-primary px-3 py-2 rounded-md text-sm font-medium transition-colors\">\n                  Find Salons\n                </Link>\n                <a href=\"#services\" className=\"text-muted-foreground hover:text-primary px-3 py-2 rounded-md text-sm font-medium transition-colors\">\n                  Services\n                </a>\n                <a href=\"#about\" className=\"text-muted-foreground hover:text-primary px-3 py-2 rounded-md text-sm font-medium transition-colors\">\n                  About\n                </a>\n              </div>\n            </div>\n          </div>\n          <div className=\"hidden md:block\">\n            <div className=\"ml-4 flex items-center md:ml-6 space-x-3\">\n              {isAuthenticated ? (\n                <>\n                  <Link href=\"/dashboard\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-dashboard\">\n                      Dashboard\n                    </Button>\n                  </Link>\n                  {user?.role === 'admin' && (\n                    <Link href=\"/admin\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-admin\">\n                        Admin\n                      </Button>\n                    </Link>\n                  )}\n                  <span className=\"text-sm text-muted-foreground\">Welcome, {user?.name}</span>\n                  <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout} data-testid=\"button-logout\">\n                    Logout\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Link href=\"/login\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-signin\">\n                      Sign In\n                    </Button>\n                  </Link>\n                  <Link href=\"/login\">\n                    <Button size=\"sm\" data-testid=\"link-signup\">\n                      Sign Up\n                    </Button>\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsOpen(!isOpen)}\n              data-testid=\"button-menu\"\n            >\n              {isOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Mobile menu */}\n        {isOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n              <Link href=\"/\" className=\"block px-3 py-2 text-foreground hover:text-primary\">\n                Home\n              </Link>\n              <Link href=\"/#salons\" className=\"block px-3 py-2 text-muted-foreground hover:text-primary\">\n                Find Salons\n              </Link>\n              {isAuthenticated ? (\n                <>\n                  <Link href=\"/dashboard\" className=\"block px-3 py-2 text-muted-foreground hover:text-primary\">\n                    Dashboard\n                  </Link>\n                  {user?.role === 'admin' && (\n                    <Link href=\"/admin\" className=\"block px-3 py-2 text-muted-foreground hover:text-primary\">\n                      Admin\n                    </Link>\n                  )}\n                  <button onClick={handleLogout} className=\"block w-full text-left px-3 py-2 text-muted-foreground hover:text-primary\">\n                    Logout\n                  </button>\n                </>\n              ) : (\n                <>\n                  <Link href=\"/login\" className=\"block px-3 py-2 text-muted-foreground hover:text-primary\">\n                    Sign In\n                  </Link>\n                  <Link href=\"/login\" className=\"block px-3 py-2 text-muted-foreground hover:text-primary\">\n                    Sign Up\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5419},"client/src/components/salon-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Clock, MapPin } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Salon } from \"@shared/schema\";\n\ninterface SalonCardProps {\n  salon: Salon;\n}\n\nexport default function SalonCard({ salon }: SalonCardProps) {\n  return (\n    <Card className=\"overflow-hidden hover-lift\" data-testid={`card-salon-${salon.id}`}>\n      <img\n        src=\"https://images.unsplash.com/photo-1503951914875-452162b0f3f1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n        alt={`${salon.name} interior`}\n        className=\"w-full h-48 object-cover\"\n      />\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-xl font-semibold text-foreground\" data-testid={`text-salon-name-${salon.id}`}>\n            {salon.name}\n          </h3>\n          <div className=\"flex items-center\">\n            <Star className=\"w-4 h-4 text-yellow-400 mr-1\" />\n            <span className=\"text-sm font-medium\" data-testid={`text-rating-${salon.id}`}>\n              {salon.rating}\n            </span>\n          </div>\n        </div>\n        <div className=\"flex items-center text-sm text-muted-foreground mb-3\">\n          <MapPin className=\"w-4 h-4 mr-2\" />\n          <span data-testid={`text-address-${salon.id}`}>{salon.address}</span>\n        </div>\n        <div className=\"flex items-center text-sm text-muted-foreground mb-4\">\n          <Clock className=\"w-4 h-4 mr-2\" />\n          <span>0.5 mi away</span>\n          <span className=\"mx-2\">â€¢</span>\n          <Badge variant=\"secondary\" className=\"text-green-600 bg-green-100\">\n            Open now\n          </Badge>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"text-sm text-muted-foreground\">Starting from</span>\n            <p className=\"text-lg font-semibold text-primary\">â‚¹250</p>\n          </div>\n          <Link href={`/salon/${salon.id}`}>\n            <Button data-testid={`button-view-salon-${salon.id}`}>\n              View Profile\n            </Button>\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2337},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: \"customer\" | \"barber\" | \"admin\";\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n}\n\nexport class AuthService {\n  private static TOKEN_KEY = \"smartcut_token\";\n  private static USER_KEY = \"smartcut_user\";\n\n  static getToken(): string | null {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  static setToken(token: string): void {\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n\n  static getUser(): User | null {\n    const userStr = localStorage.getItem(this.USER_KEY);\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  static setUser(user: User): void {\n    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n  }\n\n  static clearAuth(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n  }\n\n  static isAuthenticated(): boolean {\n    return !!this.getToken() && !!this.getUser();\n  }\n\n  static hasRole(role: \"customer\" | \"barber\" | \"admin\"): boolean {\n    const user = this.getUser();\n    return user?.role === role;\n  }\n\n  static async login(email: string, password: string): Promise<AuthResponse> {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", { email, password });\n    const data = await response.json();\n    \n    this.setToken(data.token);\n    this.setUser(data.user);\n    \n    return data;\n  }\n\n  static async register(userData: {\n    email: string;\n    password: string;\n    name: string;\n    phone?: string;\n    role: \"customer\" | \"barber\";\n  }): Promise<AuthResponse> {\n    const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n    const data = await response.json();\n    \n    this.setToken(data.token);\n    this.setUser(data.user);\n    \n    return data;\n  }\n\n  static async logout(): Promise<void> {\n    this.clearAuth();\n    window.location.href = \"/\";\n  }\n\n  static getAuthHeaders(): HeadersInit {\n    const token = this.getToken();\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  }\n}\n\n// Add auth headers to all requests\nconst originalApiRequest = apiRequest;\nexport const apiRequestWithAuth = async (\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<Response> => {\n  const headers = {\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    ...AuthService.getAuthHeaders(),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  if (res.status === 401) {\n    AuthService.clearAuth();\n    window.location.href = \"/login\";\n  }\n\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n\n  return res;\n};\n","size_bytes":2768},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { AuthService, apiRequestWithAuth } from \"@/lib/auth\";\nimport Navbar from \"@/components/navbar\";\nimport AdminPanel from \"@/components/admin-panel\";\nimport { useEffect } from \"react\";\n\nexport default function Admin() {\n  const [, setLocation] = useLocation();\n  const user = AuthService.getUser();\n\n  useEffect(() => {\n    if (!AuthService.isAuthenticated() || user?.role !== \"admin\") {\n      setLocation(\"/\");\n    }\n  }, [setLocation, user]);\n\n  if (!user || user.role !== \"admin\") {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <Navbar />\n      <AdminPanel />\n    </div>\n  );\n}\n","size_bytes":746},"client/src/pages/booking.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthService, apiRequestWithAuth } from \"@/lib/auth\";\nimport Navbar from \"@/components/navbar\";\nimport { Calendar, Clock, DollarSign, User, CheckCircle } from \"lucide-react\";\nimport type { Service, Barber, User as UserType } from \"@shared/schema\";\n\ninterface BarberWithServices {\n  barber: Barber;\n  services: Service[];\n}\n\nexport default function Booking() {\n  const { barberId, serviceId } = useParams<{ barberId: string; serviceId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const user = AuthService.getUser();\n\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n  const [selectedTime, setSelectedTime] = useState<string>(\"\");\n  const [customerInfo, setCustomerInfo] = useState({\n    name: user?.name || \"\",\n    phone: \"\",\n    email: user?.email || \"\",\n    notes: \"\",\n  });\n\n  const { data: barberData, isLoading } = useQuery<BarberWithServices>({\n    queryKey: [\"/api/barbers\", barberId],\n    enabled: !!barberId,\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (appointmentData: {\n      barberId: string;\n      serviceId: string;\n      appointmentDate: string;\n      notes?: string;\n    }) => {\n      return apiRequestWithAuth(\"POST\", \"/api/appointments\", appointmentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments/my\"] });\n      toast({\n        title: \"Booking Confirmed!\",\n        description: \"Your appointment has been successfully booked.\",\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!AuthService.isAuthenticated()) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-background min-h-screen\">\n        <Navbar />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-300 rounded mb-8\"></div>\n            <div className=\"bg-gray-300 h-96 rounded-xl\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!barberData) {\n    return (\n      <div className=\"bg-background min-h-screen\">\n        <Navbar />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-4\">Service not found</h2>\n            <p className=\"text-muted-foreground mb-8\">The service you're trying to book is not available.</p>\n            <Button onClick={() => setLocation(\"/\")}>Back to Home</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const selectedService = barberData.services.find(s => s.id === serviceId);\n  if (!selectedService) {\n    return (\n      <div className=\"bg-background min-h-screen\">\n        <Navbar />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-4\">Service not found</h2>\n            <p className=\"text-muted-foreground mb-8\">The service you're trying to book is not available.</p>\n            <Button onClick={() => setLocation(\"/\")}>Back to Home</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Generate available dates (next 14 days)\n  const availableDates = Array.from({ length: 14 }, (_, i) => {\n    const date = new Date();\n    date.setDate(date.getDate() + i + 1);\n    return date;\n  });\n\n  // Generate available times\n  const availableTimes = [\n    \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\"\n  ];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedDate || !selectedTime) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select both date and time for your appointment.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const appointmentDateTime = new Date(`${selectedDate}T${selectedTime}`);\n    \n    await bookingMutation.mutateAsync({\n      barberId: barberId!,\n      serviceId: serviceId!,\n      appointmentDate: appointmentDateTime.toISOString(),\n      notes: customerInfo.notes,\n    });\n  };\n\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <Navbar />\n      \n      <section className=\"py-20 bg-background\" data-testid=\"section-booking\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">Book Your Appointment</h2>\n            <p className=\"text-xl text-muted-foreground\">Select your preferred date, time, and confirm your booking</p>\n          </div>\n\n          <Card className=\"shadow-lg\" data-testid=\"card-booking-form\">\n            <CardContent className=\"p-8\">\n              <form onSubmit={handleSubmit}>\n                {/* Service Summary */}\n                <div className=\"mb-8 p-6 bg-muted rounded-lg\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Service Details</h3>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-foreground\" data-testid=\"text-service-name\">\n                        {selectedService.name}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\" data-testid=\"text-service-duration\">\n                        {selectedService.duration} minutes\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">{selectedService.description}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-2xl font-semibold text-primary\" data-testid=\"text-service-price\">\n                        â‚¹{selectedService.price}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Date Selection */}\n                <div className=\"mb-8\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                    <Calendar className=\"mr-2 h-5 w-5\" />\n                    Select Date\n                  </h3>\n                  <div className=\"grid grid-cols-7 gap-2\" data-testid=\"date-selection\">\n                    {availableDates.map((date) => {\n                      const dateStr = date.toISOString().split('T')[0];\n                      const isSelected = selectedDate === dateStr;\n                      return (\n                        <button\n                          key={dateStr}\n                          type=\"button\"\n                          onClick={() => setSelectedDate(dateStr)}\n                          className={`text-center p-3 border rounded-lg cursor-pointer transition-colors ${\n                            isSelected\n                              ? \"border-primary bg-primary/10 text-primary\"\n                              : \"border-border hover:border-primary hover:bg-primary/5\"\n                          }`}\n                          data-testid={`date-option-${dateStr}`}\n                        >\n                          <div className=\"text-xs text-muted-foreground\">\n                            {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\n                          </div>\n                          <div className=\"text-lg font-medium\">\n                            {date.getDate()}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {date.toLocaleDateString(\"en-US\", { month: \"short\" })}\n                          </div>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                {/* Time Selection */}\n                <div className=\"mb-8\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                    <Clock className=\"mr-2 h-5 w-5\" />\n                    Choose Time\n                  </h3>\n                  <div className=\"grid grid-cols-3 md:grid-cols-6 gap-3\" data-testid=\"time-selection\">\n                    {availableTimes.map((time) => {\n                      const isSelected = selectedTime === time;\n                      return (\n                        <button\n                          key={time}\n                          type=\"button\"\n                          onClick={() => setSelectedTime(time)}\n                          className={`p-3 border rounded-lg text-center transition-colors ${\n                            isSelected\n                              ? \"border-primary bg-primary/10 text-primary\"\n                              : \"border-border hover:border-primary hover:bg-primary/5\"\n                          }`}\n                          data-testid={`time-option-${time}`}\n                        >\n                          <span className=\"text-sm font-medium\">\n                            {new Date(`2000-01-01T${time}`).toLocaleTimeString(\"en-US\", {\n                              hour: \"numeric\",\n                              minute: \"2-digit\",\n                              hour12: true,\n                            })}\n                          </span>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                {/* Customer Information */}\n                <div className=\"mb-8\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                    <User className=\"mr-2 h-5 w-5\" />\n                    Your Information\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"name\">Full Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={customerInfo.name}\n                        onChange={(e) => setCustomerInfo({ ...customerInfo, name: e.target.value })}\n                        placeholder=\"Enter your full name\"\n                        required\n                        data-testid=\"input-customer-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">Phone Number</Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        value={customerInfo.phone}\n                        onChange={(e) => setCustomerInfo({ ...customerInfo, phone: e.target.value })}\n                        placeholder=\"(555) 123-4567\"\n                        required\n                        data-testid=\"input-customer-phone\"\n                      />\n                    </div>\n                    <div className=\"md:col-span-2\">\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={customerInfo.email}\n                        onChange={(e) => setCustomerInfo({ ...customerInfo, email: e.target.value })}\n                        placeholder=\"john@example.com\"\n                        required\n                        data-testid=\"input-customer-email\"\n                      />\n                    </div>\n                    <div className=\"md:col-span-2\">\n                      <Label htmlFor=\"notes\">Special Requests (Optional)</Label>\n                      <Textarea\n                        id=\"notes\"\n                        rows={3}\n                        value={customerInfo.notes}\n                        onChange={(e) => setCustomerInfo({ ...customerInfo, notes: e.target.value })}\n                        placeholder=\"Any specific requests or notes for your barber...\"\n                        data-testid=\"textarea-customer-notes\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Booking Summary */}\n                <div className=\"bg-muted rounded-lg p-6 mb-8\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                    <CheckCircle className=\"mr-2 h-5 w-5\" />\n                    Booking Summary\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Service:</span>\n                      <span className=\"font-medium text-foreground\">{selectedService.name}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Date & Time:</span>\n                      <span className=\"font-medium text-foreground\">\n                        {selectedDate && selectedTime\n                          ? `${new Date(selectedDate).toLocaleDateString(\"en-US\", {\n                              weekday: \"short\",\n                              month: \"short\",\n                              day: \"numeric\",\n                            })} at ${new Date(`2000-01-01T${selectedTime}`).toLocaleTimeString(\"en-US\", {\n                              hour: \"numeric\",\n                              minute: \"2-digit\",\n                              hour12: true,\n                            })}`\n                          : \"Please select date and time\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Duration:</span>\n                      <span className=\"font-medium text-foreground\">{selectedService.duration} minutes</span>\n                    </div>\n                    <div className=\"border-t border-border pt-3 mt-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-lg font-semibold text-foreground\">Total:</span>\n                        <span className=\"text-lg font-semibold text-primary\">â‚¹{selectedService.price}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Submit Button */}\n                <div className=\"text-center\">\n                  <Button\n                    type=\"submit\"\n                    size=\"lg\"\n                    className=\"w-full md:w-auto px-8 py-4\"\n                    disabled={bookingMutation.isPending || !selectedDate || !selectedTime}\n                    data-testid=\"button-confirm-booking\"\n                  >\n                    <Calendar className=\"mr-2 h-5 w-5\" />\n                    {bookingMutation.isPending ? \"Confirming Booking...\" : \"Confirm Booking\"}\n                  </Button>\n                  <p className=\"text-sm text-muted-foreground mt-3\">\n                    You'll receive a confirmation email and SMS shortly\n                  </p>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":15922},"client/src/pages/dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { AuthService } from \"@/lib/auth\";\nimport { apiRequestWithAuth } from \"@/lib/auth\";\nimport Navbar from \"@/components/navbar\";\nimport CustomerDashboard from \"@/components/customer-dashboard\";\nimport BarberDashboard from \"@/components/barber-dashboard\";\nimport { useEffect } from \"react\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const user = AuthService.getUser();\n\n  useEffect(() => {\n    if (!AuthService.isAuthenticated()) {\n      setLocation(\"/login\");\n    }\n  }, [setLocation]);\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <Navbar />\n      {user.role === \"customer\" && <CustomerDashboard />}\n      {user.role === \"barber\" && <BarberDashboard />}\n    </div>\n  );\n}\n","size_bytes":893},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/navbar\";\nimport HeroSection from \"@/components/hero-section\";\nimport SalonCard from \"@/components/salon-card\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { MapPin, Calendar, Star, Search, Filter, Heart, DollarSign, History, CalendarCheck } from \"lucide-react\";\nimport { AuthService } from \"@/lib/auth\";\nimport type { Salon } from \"@shared/schema\";\n\nexport default function Home() {\n  const user = AuthService.getUser();\n\n  const { data: salons, isLoading } = useQuery<Salon[]>({\n    queryKey: [\"/api/salons\"],\n  });\n\n  return (\n    <div className=\"bg-background font-sans\">\n      <Navbar />\n      \n      <HeroSection />\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-muted\" data-testid=\"section-features\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">Why Choose Smart Cut?</h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">Experience the future of salon booking with our comprehensive platform designed for both customers and professionals.</p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"p-8 hover-lift\" data-testid=\"card-feature-nearby\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-lg flex items-center justify-center mb-6\">\n                <MapPin className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-4\">Find Nearby Salons</h3>\n              <p className=\"text-muted-foreground\">Discover top-rated salons and barbers in your area with detailed profiles, portfolios, and real customer reviews.</p>\n            </Card>\n            <Card className=\"p-8 hover-lift\" data-testid=\"card-feature-booking\">\n              <div className=\"w-16 h-16 bg-secondary/10 rounded-lg flex items-center justify-center mb-6\">\n                <Calendar className=\"w-8 h-8 text-secondary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-4\">Real-time Booking</h3>\n              <p className=\"text-muted-foreground\">Book appointments instantly with live availability. Reschedule or cancel with ease, all from your dashboard.</p>\n            </Card>\n            <Card className=\"p-8 hover-lift\" data-testid=\"card-feature-verified\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-lg flex items-center justify-center mb-6\">\n                <Star className=\"w-8 h-8 text-yellow-500\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-4\">Verified Professionals</h3>\n              <p className=\"text-muted-foreground\">All barbers and salons are verified with portfolios, certifications, and genuine customer ratings for your peace of mind.</p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Salon Listing Section */}\n      <section id=\"salons\" className=\"py-20 bg-background\" data-testid=\"section-salons\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center mb-12\">\n            <div>\n              <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">Popular Salons & Barbers</h2>\n              <p className=\"text-xl text-muted-foreground\">Discover highly-rated professionals in your area</p>\n            </div>\n            <div className=\"flex items-center space-x-4 mt-6 md:mt-0\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search location...\"\n                  className=\"pl-10 w-64\"\n                  data-testid=\"input-search-location\"\n                />\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              </div>\n              <Button variant=\"outline\" data-testid=\"button-filter\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                Filter\n              </Button>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-gray-300 h-48 rounded-t-xl\"></div>\n                  <div className=\"bg-white p-6 rounded-b-xl\">\n                    <div className=\"h-4 bg-gray-300 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-300 rounded w-2/3\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : salons && salons.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {salons.map((salon) => (\n                <SalonCard key={salon.id} salon={salon} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground text-lg\">No salons available at the moment.</p>\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Button variant=\"secondary\" size=\"lg\" data-testid=\"button-view-all-salons\">\n              View All Salons\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Customer Dashboard Preview (if logged in) */}\n      {user && user.role === 'customer' && (\n        <section className=\"py-20 bg-muted\" data-testid=\"section-dashboard-preview\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">Your Dashboard</h2>\n              <p className=\"text-xl text-muted-foreground\">Quick overview of your recent activity</p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mr-4\">\n                    <CalendarCheck className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\">3</p>\n                    <p className=\"text-sm text-muted-foreground\">Upcoming</p>\n                  </div>\n                </div>\n              </Card>\n              <Card className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mr-4\">\n                    <History className=\"h-6 w-6 text-secondary\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\">24</p>\n                    <p className=\"text-sm text-muted-foreground\">Completed</p>\n                  </div>\n                </div>\n              </Card>\n              <Card className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mr-4\">\n                    <Heart className=\"h-6 w-6 text-red-500\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\">5</p>\n                    <p className=\"text-sm text-muted-foreground\">Favorites</p>\n                  </div>\n                </div>\n              </Card>\n              <Card className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\n                    <DollarSign className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\">â‚¹840</p>\n                    <p className=\"text-sm text-muted-foreground\">Total Spent</p>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12\" data-testid=\"section-footer\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <h3 className=\"text-xl font-bold text-primary mb-4 flex items-center\">\n                <Calendar className=\"mr-2 h-5 w-5\" />\n                Smart Cut\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Your premier destination for professional salon booking. Connect with top-rated barbers and salons effortlessly.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">For Customers</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Find Salons</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Book Appointment</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">My Bookings</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Reviews</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">For Professionals</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Join as Barber</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Manage Profile</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Business Tools</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Support</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">Company</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">About Us</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Contact</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Terms of Service</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-border mt-8 pt-8 text-center\">\n            <p className=\"text-muted-foreground\">&copy; 2024 Smart Cut. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":11408},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthService } from \"@/lib/auth\";\nimport { Scissors, X } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    phone: \"\",\n    role: \"customer\" as \"customer\" | \"barber\",\n  });\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      if (isLoginMode) {\n        await AuthService.login(formData.email, formData.password);\n        toast({\n          title: \"Login successful\",\n          description: \"Welcome back to Smart Cut!\",\n        });\n      } else {\n        await AuthService.register({\n          email: formData.email,\n          password: formData.password,\n          name: formData.name,\n          phone: formData.phone,\n          role: formData.role,\n        });\n        toast({\n          title: \"Registration successful\",\n          description: \"Welcome to Smart Cut!\",\n        });\n      }\n      \n      const user = AuthService.getUser();\n      if (user?.role === \"admin\") {\n        setLocation(\"/admin\");\n      } else {\n        setLocation(\"/dashboard\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4\">\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 z-40\" />\n      <Card className=\"w-full max-w-md relative z-50\" data-testid=\"card-auth\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle className=\"text-2xl font-bold text-foreground flex items-center\">\n              <Scissors className=\"mr-2 h-6 w-6 text-primary\" />\n              Welcome to Smart Cut\n            </CardTitle>\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-close\">\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </Link>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} data-testid=\"form-auth\">\n            {!isLoginMode && (\n              <div className=\"mb-4\">\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter your full name\"\n                  required\n                  data-testid=\"input-name\"\n                />\n              </div>\n            )}\n            \n            <div className=\"mb-4\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                placeholder=\"john@example.com\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div className=\"mb-4\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                placeholder=\"â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢\"\n                required\n                minLength={6}\n                data-testid=\"input-password\"\n              />\n            </div>\n\n            {!isLoginMode && (\n              <>\n                <div className=\"mb-4\">\n                  <Label htmlFor=\"phone\">Phone Number (Optional)</Label>\n                  <Input\n                    id=\"phone\"\n                    name=\"phone\"\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={handleInputChange}\n                    placeholder=\"(555) 123-4567\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n                \n                <div className=\"mb-6\">\n                  <Label>I am a</Label>\n                  <RadioGroup\n                    value={formData.role}\n                    onValueChange={(value) => setFormData({ ...formData, role: value as \"customer\" | \"barber\" })}\n                    className=\"flex space-x-4 mt-2\"\n                    data-testid=\"radio-group-role\"\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"customer\" id=\"customer\" />\n                      <Label htmlFor=\"customer\">Customer</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"barber\" id=\"barber\" />\n                      <Label htmlFor=\"barber\">Barber/Salon</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n              </>\n            )}\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full mb-4\"\n              disabled={isLoading}\n              data-testid=\"button-submit\"\n            >\n              {isLoading ? \"Processing...\" : (isLoginMode ? \"Sign In\" : \"Create Account\")}\n            </Button>\n            \n            <div className=\"text-center\">\n              <Button\n                type=\"button\"\n                variant=\"link\"\n                onClick={() => setIsLoginMode(!isLoginMode)}\n                data-testid=\"button-toggle-mode\"\n              >\n                {isLoginMode ? \"Don't have an account? Sign up\" : \"Already have an account? Sign in\"}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6782},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/salon-profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, MapPin, Phone, Mail, Clock } from \"lucide-react\";\nimport Navbar from \"@/components/navbar\";\nimport type { Salon, Barber, Service, Review, User } from \"@shared/schema\";\n\ninterface SalonData {\n  salon: Salon;\n  barbers: Barber[];\n}\n\ninterface BarberWithServices {\n  barber: Barber;\n  services: Service[];\n  reviews: (Review & { customer: User })[];\n}\n\nexport default function SalonProfile() {\n  const { id } = useParams<{ id: string }>();\n\n  const { data: salonData, isLoading: salonLoading } = useQuery<SalonData>({\n    queryKey: [\"/api/salons\", id],\n    enabled: !!id,\n  });\n\n  const { data: barberData, isLoading: barberLoading } = useQuery<BarberWithServices>({\n    queryKey: [\"/api/barbers\", salonData?.barbers[0]?.userId],\n    enabled: !!salonData?.barbers[0]?.userId,\n  });\n\n  if (salonLoading || barberLoading) {\n    return (\n      <div className=\"bg-background min-h-screen\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"animate-pulse\">\n            <div className=\"bg-gray-300 h-64 rounded-xl mb-8\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div>\n                <div className=\"h-8 bg-gray-300 rounded mb-4\"></div>\n                <div className=\"h-4 bg-gray-300 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-300 rounded w-2/3\"></div>\n              </div>\n              <div>\n                <div className=\"h-8 bg-gray-300 rounded mb-4\"></div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"h-32 bg-gray-300 rounded\"></div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!salonData || !barberData) {\n    return (\n      <div className=\"bg-background min-h-screen\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-4\">Salon not found</h2>\n            <p className=\"text-muted-foreground mb-8\">The salon you're looking for doesn't exist or has been removed.</p>\n            <Link href=\"/\">\n              <Button>Back to Home</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const { salon } = salonData;\n  const { barber, services, reviews } = barberData;\n\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <Navbar />\n      \n      <section className=\"py-20 bg-muted\" data-testid=\"section-salon-profile\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"overflow-hidden\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Profile Info */}\n              <div className=\"p-8\">\n                <div className=\"flex items-start space-x-6 mb-6\">\n                  <img\n                    src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=150&h=150\"\n                    alt={`${barber.title} profile`}\n                    className=\"w-24 h-24 rounded-full object-cover\"\n                  />\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"text-barber-name\">\n                      {salon.name}\n                    </h2>\n                    <p className=\"text-muted-foreground mb-2\">{barber.title}</p>\n                    <div className=\"flex items-center mb-2\">\n                      <div className=\"flex text-yellow-400 mr-2\">\n                        {[...Array(5)].map((_, i) => (\n                          <Star key={i} className=\"w-4 h-4 fill-current\" />\n                        ))}\n                      </div>\n                      <span className=\"text-sm font-medium\" data-testid=\"text-rating\">{barber.rating}</span>\n                      <span className=\"text-sm text-muted-foreground ml-2\" data-testid=\"text-review-count\">\n                        ({reviews.length} reviews)\n                      </span>\n                    </div>\n                    <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                      <MapPin className=\"w-4 h-4 mr-1\" />\n                      <span>{salon.address}</span>\n                    </div>\n                    <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                      <Phone className=\"w-4 h-4 mr-1\" />\n                      <span>{salon.phone}</span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{barber.experience}+ years experience</p>\n                  </div>\n                </div>\n                \n                <div className=\"mb-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-3\">About</h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-bio\">\n                    {barber.bio}\n                  </p>\n                </div>\n\n                <div className=\"mb-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-3\">Specialties</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {barber.specialties?.map((specialty, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"bg-primary/10 text-primary\" data-testid={`badge-specialty-${index}`}>\n                        {specialty}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Services & Pricing */}\n                <div className=\"mb-8\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Services & Pricing</h3>\n                  <div className=\"space-y-4\">\n                    {services.map((service) => (\n                      <div key={service.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\" data-testid={`service-${service.id}`}>\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">{service.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{service.description}</p>\n                          <span className=\"text-xs text-muted-foreground\">{service.duration} min</span>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-lg font-semibold text-primary\">â‚¹{service.price}</p>\n                          <Link href={`/book/${barber.id}/${service.id}`}>\n                            <Button size=\"sm\" className=\"mt-2\" data-testid={`button-book-${service.id}`}>\n                              Book Now\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Portfolio & Reviews */}\n              <div className=\"p-8 bg-muted\">\n                <div className=\"mb-8\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Portfolio</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {[\n                      \"https://images.unsplash.com/photo-1621605815971-fbc98d665033?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=300\",\n                      \"https://images.unsplash.com/photo-1605497788044-5a32c7078486?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=300\",\n                      \"https://images.unsplash.com/photo-1503951914875-452162b0f3f1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=300\",\n                      \"https://images.unsplash.com/photo-1560066984-138dadb4c035?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=300\",\n                    ].map((src, index) => (\n                      <img\n                        key={index}\n                        src={src}\n                        alt={`Portfolio ${index + 1}`}\n                        className=\"rounded-lg object-cover w-full h-32\"\n                        data-testid={`img-portfolio-${index}`}\n                      />\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Recent Reviews</h3>\n                  <div className=\"space-y-4\">\n                    {reviews.length > 0 ? (\n                      reviews.slice(0, 3).map((review) => (\n                        <Card key={review.id} className=\"p-4\" data-testid={`review-${review.id}`}>\n                          <div className=\"flex items-start space-x-3\">\n                            <img\n                              src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=60&h=60\"\n                              alt={`${review.customer.name} profile`}\n                              className=\"w-10 h-10 rounded-full object-cover\"\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <h4 className=\"font-medium text-foreground\">{review.customer.name}</h4>\n                                <div className=\"flex text-yellow-400 text-sm\">\n                                  {[...Array(review.rating)].map((_, i) => (\n                                    <Star key={i} className=\"w-4 h-4 fill-current\" />\n                                  ))}\n                                </div>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground mb-2\">{review.comment}</p>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {new Date(review.createdAt!).toLocaleDateString()}\n                              </span>\n                            </div>\n                          </div>\n                        </Card>\n                      ))\n                    ) : (\n                      <p className=\"text-muted-foreground\">No reviews yet</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":10936},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nSmart Cut is a comprehensive salon booking platform that connects customers with barbers and salons. The application features a React frontend with a Node.js/Express backend, enabling users to discover local salons, book appointments, and manage their haircare experiences. The platform supports multiple user roles (customers, barbers, admins) with role-based dashboards and functionality.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management\n- **UI Components**: Custom component library built on Radix UI primitives with shadcn/ui styling\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Form Handling**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **API Design**: RESTful API with role-based access control middleware\n- **Development**: Hot module replacement with Vite integration for development mode\n\n## Database Design\n- **Users Table**: Stores customer, barber, and admin accounts with role-based permissions\n- **Salons Table**: Salon information with owner relationships and approval status\n- **Barbers Table**: Barber profiles linked to users and salons with availability tracking\n- **Services Table**: Services offered by barbers with pricing\n- **Appointments Table**: Booking system with status tracking and customer/barber relationships\n- **Reviews Table**: Customer feedback system for barbers\n\n## Authentication & Authorization\n- **JWT Tokens**: Stateless authentication with role-based claims\n- **Role-Based Access**: Three user types (customer, barber, admin) with distinct permissions\n- **Protected Routes**: Middleware validation for API endpoints and frontend route guards\n- **Password Security**: Bcrypt hashing with salt rounds for secure password storage\n\n## File Structure\n- **Client**: React application in `/client` directory with components, pages, and utilities\n- **Server**: Express backend in `/server` directory with routes and business logic\n- **Shared**: Common TypeScript types and Zod schemas in `/shared` directory\n- **Database**: Drizzle migrations and configuration for schema management\n\n# External Dependencies\n\n## Database\n- **Neon Database**: PostgreSQL serverless database (@neondatabase/serverless)\n- **Connection**: Environment variable DATABASE_URL for connection string\n\n## UI & Styling\n- **Radix UI**: Comprehensive set of unstyled UI primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n- **Google Fonts**: Custom font loading (DM Sans, Architects Daughter, Fira Code, Geist Mono)\n\n## Development Tools\n- **Vite**: Fast build tool with HMR and TypeScript support\n- **ESBuild**: Fast bundling for production server builds\n- **Replit Integration**: Development environment plugins and error handling\n\n## Authentication & Security\n- **JSON Web Tokens**: Stateless authentication mechanism\n- **Bcrypt**: Password hashing and comparison\n- **CORS**: Cross-origin resource sharing configuration\n\n## Data Fetching & Forms\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Performant forms with minimal re-renders\n- **Zod**: Runtime type validation for forms and API schemas","size_bytes":3678}},"version":1}